/*
 * generated by Xtext 2.20.0
 */
package org.qdt.quingo.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.qdt.quingo.quingo.Program
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.qdt.quingo.quingo.QuingoPackage

@ExtendWith(InjectionExtension)
@InjectWith(QuingoInjectorProvider)
class QuingoParsingTest {
	@Inject
	ParseHelper<Program> parseHelper
	
	@Inject extension ValidationTestHelper
	
	def void testStatement(String statement) {
		val result = parseHelper.parse('''
			operation fun(): unit
			{
				«statement»
			}
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}

	@Test def void testArrayDeclare() {
		testStatement("int[][][] array;")
	}
	
	@Test def void testImport() {
		val result = parseHelper.parse('''
			import  id.id.*
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}
	
	@Test def void testPackage() {
		val result = parseHelper.parse('''
			package  id.id
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}
	
	@Test def void testEmptystatment() {
		val result = parseHelper.parse('''
			opaque fun(): unit;			
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}
	
	@Test def void testLocalVarDecl() {
		testStatement("int a ;
				bool b;
				double c;
				(int,bool) d;
				int[][] e;")
	}
	
	@Test def void testDeclAndAssign() {
		testStatement("int a = 0;")
	}

	@Test def void testMultiDecl() {
		testStatement("int a, b;")
	}

	@Test def void testMultiDeclAndAssign() {
		testStatement("int a = 0, b;")
	}

	@Test def void testAssignment() {   //赋值test 先放一下
		val result = parseHelper.parse('''
			operation fun(): unit
			{
				a = c ;
				a = a[1][2];
				a = a[1][2].length;
				a[1][2] = c;
				a[1][2] = a[2][3];
				a[1][2] = a[2][3].length;
				a[1][2].length = c;				
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test def void testFunctionCall() {
		val result = parseHelper.parse('''
			opaque fun(): int;
			operation funBar(): unit
			{
				fun();
			}
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}
	
	@Test def void testConfig() {
		val result = parseHelper.parse('''
		{
		    "Rx90": {
		        "duration": 20,
		        "matrix": [ [0.0,0.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
		        "type": "single-qubit",
		        "eqasm": "rx90"
		    }
		}
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}

	@Test def void testIfStatement() {
		testStatement("if(true){  } 
				else  {  };")
	}

	@Test def void testReturnStatement() {
		val result = parseHelper.parse('''
			operation fun(): int
			{
				return 1;
			}
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}

	@Test def void testWaitStatement() {
		testStatement("using(q: qubit) {
						wait(q, 4);
					}")
	}

	@Test def void testBlockStatement() {
		testStatement("{}")
	}

	@Test def void testWhileStatement() {
		testStatement("while(true) {
						}")
	}

	@Test def void testBreakStatement() {
		val result = parseHelper.parse('''
			operation fun(): unit
			{
				break;
			}
		''')
		Assertions.assertNotNull(result)
		result.assertError(QuingoPackage.eINSTANCE.breakStatement, null,
			"'break' must be used in a while, for or switch statement"
		)
	}
	
	@Test def void testContinueStatement() {
		val result = parseHelper.parse('''
			operation fun(): unit
			{
				continue;
			}
		''')
		Assertions.assertNotNull(result)
		result.assertError(QuingoPackage.eINSTANCE.continueStatement, null,
			"'continue' must be used in a while or for statement"
		)
	}
	
	@Test def void testForStatement() {
		testStatement("for(int i=0; i<2; i+=1) {
						}")
	}

	@Test def void testForNoHead() {
		testStatement("int i=0;
					   for(; i<2; i+=1) {
						}")
	}

	@Test def void testForNoTail() {
		testStatement("for(int i=0; i<2;) {
						}")
	}

	@Test def void testUsingStatement() {
		testStatement("using(q: qubit) {}")
	}
	
	@Test def void testSwitchStatement() {
		testStatement("switch(2) {
						case 1:
						case 2: {}
						default: {}
					}")
	}
	
	@Test def void testEmptyStatement() {
		testStatement(";")
	}
	
	@Test def void testTimerDeclaration() {
		testStatement("t1:")
	}

	@Test def void testTimingConstraint() {
		testStatement("t1:
						@t1=30:")
	}

	@Test def void testDefaulValue() {
		val result = parseHelper.parse('''
			operation fun(par: int = 0): unit { }
		''')
		Assertions.assertNotNull(result)
		result.assertNoErrors
	}
}

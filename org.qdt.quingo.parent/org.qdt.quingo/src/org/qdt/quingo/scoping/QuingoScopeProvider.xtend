/*
 * generated by Xtext 2.20.0
 */
package org.qdt.quingo.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.qdt.quingo.quingo.QuingoPackage
import org.qdt.quingo.quingo.BlockStatement
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import org.qdt.quingo.quingo.LocalVarDecl
import org.qdt.quingo.quingo.UsingStatement
import org.qdt.quingo.quingo.FunDeclaration
import org.qdt.quingo.quingo.Program
import org.qdt.quingo.quingo.ForStatement
import java.util.ArrayList
import org.qdt.quingo.quingo.VariableName

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class QuingoScopeProvider extends AbstractQuingoScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (reference == QuingoPackage.eINSTANCE.expVariable_Value) {
			return scopeForVariable(context, reference)
		}
		return super.getScope(context, reference)
	}
	
	def IScope scopeForVariable(EObject context, EReference reference) {
		val container = context.eContainer
		if (container instanceof BlockStatement) {
			var locals = container.stats.takeWhile[it != context].filter(LocalVarDecl)
			var list = new ArrayList<VariableName>
			for (local: locals) {
				for (init: local.init) {
					list.add(init.varName)
				}
			}
			return Scopes.scopeFor(list, scopeForVariable(container, reference))
		}
		else if (container instanceof ForStatement) {
			var forInit = container.init
			if (forInit instanceof LocalVarDecl) {
				var list = new ArrayList<VariableName>
				for (init: forInit.init) {
					list.add(init.varName)
				}
				return Scopes.scopeFor(list, scopeForVariable(container, reference))
			}
			else {
				return scopeForVariable(container, reference)
			}
		}
		else if (container instanceof UsingStatement) {
			return Scopes.scopeFor(container.qvar, scopeForVariable(container, reference))
		}
		else if (container instanceof FunDeclaration) {
			return Scopes.scopeFor(container.pars, scopeForVariable(container, reference))
		}
		else if (container instanceof Program) {
			return super.getScope(container, reference)
		}
		else {
			return scopeForVariable(container, reference)
		}
	}
}

/*
 * generated by Xtext 2.20.0
 */
package org.qdt.quingo.validation

import org.qdt.quingo.typing.validation.QuingoSemanticsValidator

import org.eclipse.xtext.validation.Check
import org.qdt.quingo.quingo.Expression
import org.qdt.quingo.quingo.ExpTuple
import org.qdt.quingo.quingo.ExpVariable
import org.qdt.quingo.quingo.ArrayAccess
import org.qdt.quingo.quingo.SwitchStatement
import org.qdt.quingo.quingo.BreakStatement
import org.qdt.quingo.quingo.WhileStatement
import org.qdt.quingo.quingo.FunDeclaration
import org.qdt.quingo.quingo.ContinueStatement
import org.qdt.quingo.quingo.ForStatement
import org.qdt.quingo.quingo.LocalVarDecl
import org.qdt.quingo.quingo.BlockStatement
import java.util.Set
import java.util.HashSet
import org.qdt.quingo.quingo.QuingoPackage
import org.qdt.quingo.quingo.Assignment

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class QuingoValidator extends QuingoSemanticsValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					QuingoPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def checkDuplicateVariable(LocalVarDecl stat) {
		var container = stat.eContainer
		if (container instanceof BlockStatement) {
			var Set<String> idlist = new HashSet<String>
			var localList = container.stats.takeWhile[it != stat].filter(LocalVarDecl)
			for (local : localList) {
				for (init : local.init) {
					idlist.add(init.varName.name)
				}
			}
			for (var i=0; i<stat.init.length; i++) {
				if (!idlist.add(stat.init.get(i).varName.name)) {
					error("Variable name is duplicated!", QuingoPackage.Literals.LOCAL_VAR_DECL__INIT, i)						
				}
			}
		}
	}

	@Check
	def checkBreak(BreakStatement stat) {
		var container = stat.eContainer
		while (!(container instanceof WhileStatement || container instanceof ForStatement
		  || container instanceof SwitchStatement)) {
			if (container instanceof FunDeclaration) {
				error("'break' must be used in a while, for or switch statement", null)
				return
			}
			container = container.eContainer
		}
	}
	
	@Check
	def checkContinue(ContinueStatement stat) {
		var container = stat.eContainer
		while (!(container instanceof WhileStatement || container instanceof ForStatement)) {
			if (container instanceof FunDeclaration) {
				error("'continue' must be used in a while or for statement", null)
				return
			}
			container = container.eContainer
		}
	}
	
	@Check
	def checkAssignment(Assignment stat) {
		var left = stat.left
		if (!checkLeftSide(left as Expression)) {
			error("Left side is wrong!", stat, QuingoPackage.Literals.ASSIGNMENT__LEFT)
		}
	}
	
	def Boolean checkLeftSide(Expression exp) {
		if (exp instanceof ExpTuple) {
			for (texp: (exp as ExpTuple).texp) {
				if (!checkLeftSide(texp)) {
					return false
				}
			}
			return true
		}
		else if (exp instanceof ExpVariable) {
			return true
		}
		else if (exp instanceof ArrayAccess) {
			return true
		}
		return false
	}
}

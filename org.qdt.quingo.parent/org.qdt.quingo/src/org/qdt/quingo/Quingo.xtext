grammar org.qdt.quingo.Quingo with org.eclipse.xtext.common.Terminals

generate quingo "http://www.qdt.org/quingo/Quingo"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
    ('package' name=QualifiedName)?
     (elements+=AbstractElement)*;

AbstractElement:
     fun=FunDeclaration | Import | qconfig=QConfig | Include;

QualifiedName:
    ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;

Include:
	'include' file=STRING;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

FunDeclaration:
	(f?="function" | o?="operation" | p?="opaque") name=ID
	"(" ( pars+=FormalParameter ( "," pars+=FormalParameter )* )? ")"
	 ":" type=Type  ( block=BlockStatement | ";" );

FormalParameter:
	name=ID ":" type=Type ("=" exp=Expression)?;

Type:
	FunctionType;

FunctionType returns Type:
	ArrayType ({FunctionType.left=current} "->" right=ArrayType)* ;

ArrayType returns Type:
	PrimitiveType ({ArrayType.ptype=current} "[" (length=Expression)? "]")* ;

PrimitiveType returns Type:
	{IntType}"int" | {BoolType}"bool" | {DoubleType}"double" | {UnitType}"unit" | {QubitType}"qubit" | TupleType;

TupleType returns Type:
	{TupleType} "(" type+=Type ("," type+=Type)+ ")";

Statement:
	 IfStatement | ReturnStatement | WaitStatement | ForInitStatment | ForStatement
	 | BlockStatement | WhileStatement | BreakStatement | ContinueStatement | UsingStatement
	 | SwitchStatement | SwitchBlock | TimerDeclaration | TimingConstraint;

ForInitStatment:
	LocalVarDecl | StatementNoColon ";" | EmptyStatement;

StatementNoColon:
	Assignment | OpAssignment | FunctionCall;

ForStatement:
	"for" "(" initExpression=ForInitStatment condExpression=Expression ";" loopExpression=StatementNoColon? ")"
	loopBody=BlockStatement;

LocalVarDecl:
	type=Type init+=VariableInit ("," init+=VariableInit)* ";";

VariableInit:
	varName=VariableName ("=" value=Expression)?;

VariableName:
	name=ID;

Variable:
	FormalParameter | FunDeclaration | VariableName;

Assignment:
	left=LeftHandSide "=" value=Expression;

LeftHandSide:
	ArrayAccess | ExpTuple;

FunctionCall:
	exp=ExpFunctionCall;

IfStatement:
	"if" "(" expression=Expression ")" ifStat=BlockStatement (=> 'else'  elseStat=BlockStatement)?;

ReturnStatement:
	{ReturnStatement} "return" (value=Expression)? ";";

WaitStatement:
	"wait" "("lis+=Expression ("," lis+=Expression)+ ")" ";";

BlockStatement:
	{BlockStatement} "{" (stats += Statement)* "}";

WhileStatement:
	"while" "(" condExpression=Expression ")" whileBody = BlockStatement;

SwitchStatement:
	"switch" "(" expSwitchValue=Expression ")" "{" switchBody+=SwitchBlock* (defaultBlock=DefaultBlock)? "}";

SwitchBlock :
	{SwitchBlock} "case" expCaseValue=Expression ":" (caseActionStats=BlockStatement)? ;

DefaultBlock :
	{DefaultBlock} "default" ":" (caseActionStats=BlockStatement)? ;

BreakStatement:
	{BreakStatement} "break" ";";

ContinueStatement:
	{ContinueStatement} "continue" ";";

EmptyStatement:
	{EmptyStatement} ";";

UsingStatement:
	"using" "(" pars+=FormalParameter ( "," pars+=FormalParameter )* ")"
	 block=BlockStatement;

OpAssignment:
	left=LeftHandSide op=ASSIGNMENT_OP right=Expression;

TimerDeclaration:
	name=ID ":";

TimingConstraint:
	'@' timer=[TimerDeclaration] '=' value=Expression ':';

Expression :
	Or;

Or returns Expression:
	And ({Or.left=current} "||" right=And)*;

And returns Expression:
	Equal ({And.left=current} "&&" right=Equal)*;

Equal returns Expression:
	NEqual ({Equal.left=current} op=EQUAL_OP right=NEqual)*;

NEqual returns Expression:
	Add ({NEqual.left=current} op=NEQUAL_OP right=Add)*;

Add returns Expression:
	Mult ({Add.left=current} op=ADD_OP right=Mult)*;

Mult returns Expression:
	Unary ({Mult.left=current} op=MULT_OP right=Unary)*;

Unary returns Expression:
	Primary | {Unary} op=UNARY_OP final=Unary;

Primary returns Expression:
	ArrayAccess | BooleanLiteral | IntLiteral | DoubleLiteral | ExpFunctionCall | ExpTuple | ExpArray | ToInt | ToDouble;

ArrayAccess returns Expression:
	{ExpVariable} value=[Variable] ({ArrayAccess.array=current} "[" dim=Expression "]")* ({ExpLength.left=current} ".length")?;

BooleanLiteral returns Expression:
	{BooleanLiteral} ('false' | isTrue?='true');

IntLiteral returns Expression:
	{IntLiteral} value=INT;

DoubleLiteral returns Expression:
	{DoubleLiteral} value=DOUBLE;

ExpFunctionCall returns Expression:
	{ExpFunctionCall} fun=[Variable] "(" ( pars+=Expression ( "," pars+=Expression )* )? ")";

ExpTuple returns Expression:
	{ExpTuple} "(" texp+=Expression ("," texp+=Expression)* ")";

ExpArray returns Expression:
	{ExpArray} "{" exp+=Expression ("," exp+=Expression )* "}";

ToInt returns Expression:
	{ToInt} "toInt" "(" value=Expression ")";

ToDouble returns Expression:
	{ToDouble} "toDouble" "(" value=Expression ")";

terminal ASSIGNMENT_OP:
	"+=" | "-=" | "*=" | "/=" | "%=" ;

terminal EQUAL_OP:
	"==" | "!=" ;

terminal NEQUAL_OP:
	"<" | "<=" | ">=" | ">";

terminal MULT_OP:
	"*" | "/" | "%";

terminal ADD_OP:
 	"-" | "+" ;

UNARY_OP:
	ADD_OP | "!";

QConfig :
	"{"
		opaque+=Opaque ("," opaque+=Opaque )*
	"}";

Opaque:
	name=STRING ":" "{"
		field+=Field ("," field+=Field )*
	"}";

Field:
	name=STRING ":" value=Jvalue;

Jvalue:
	opaque=Opaque | string=STRING | {Jvalue} inti=INT | {Jvalue} Jarray;

Jarray:
	"[""[" (ADD_OP)?DOUBLE "," (ADD_OP)?DOUBLE "]"  (",""["(ADD_OP)?DOUBLE ","(ADD_OP)?DOUBLE  "]")* "]";

terminal DOUBLE returns ecore::EFloat:
        INT '.' INT;
